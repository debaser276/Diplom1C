#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	
	Если Не ДоговорАбонентскоеОбслуживаниеДействующий(Договор, Дата) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Договор не является договором абонентского обслуживания или не действует";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	СуммаЧасовКОплате = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");			
	Если СуммаЧасовКОплате > 0 Тогда
		
		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Договор = Договор;
		Движение.КоличествоЧасов = СуммаЧасовКОплате;
		Движение.СуммаКОплате = СуммаЧасовКОплате * СтоимостьЧасаРаботыПоДоговору(Договор);
		
	КонецЕсли;				
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	Если ЭтоНовый() Тогда
		ТекстСообщения = СтрШаблон("Создан документ №%1 от %2 на обслуживание специалист %3 время начала работ %4",
			Номер, Дата, Специалист, Формат(ВремяНачалаРаботПлан, "ДФ=ЧЧ:мм;"));
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВКМ_ОбслуживаниеКлиента.Специалист,
			|	ВКМ_ОбслуживаниеКлиента.ВремяНачалаРаботПлан
			|ИЗ
			|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
			|ГДЕ
			|	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ВремяСтарого = Выборка.ВремяНачалаРаботПлан;
			СпециалистСтарого = Выборка.Специалист;
		КонецЕсли;
		
		Если ВремяСтарого <> ВремяНачалаРаботПлан Тогда
			ТекстСообщения = СтрШаблон("Время начала работ у документа №%1 изменилось на %2", Номер, Формат(ВремяНачалаРаботПлан, "ДФ=ЧЧ:мм;"));
		КонецЕсли;
		
		Если СпециалистСтарого <> Специалист Тогда
			ТекстСообщения = СтрШаблон("Специалист у документа №%1 изменился на %2", Номер, Специалист);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекстСообщения <> "" Тогда
		Уведомление = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		Уведомление.ТекстСообщения = ТекстСообщения;
		Уведомление.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

Функция ДоговорАбонентскоеОбслуживаниеДействующий(Договор, Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.ВКМ_ДатаНачалаДействияДоговора КАК ДатаНачала,
		|	ДоговорыКонтрагентов.ВКМ_ДатаОкончанияДействияДоговора КАК ДатаОкончания,
		|	ДоговорыКонтрагентов.ВидДоговора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ВидДоговора = Выборка.ВидДоговора;
		
	Если Не ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.АбонентскоеОбслуживание 
		Или Выборка.ДатаНачала > Дата Или Выборка.ДатаОкончания < Дата Тогда
		 Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СтоимостьЧасаРаботыПоДоговору(Договор)
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.ВКМ_СтоимостьЧасаРаботы КАК СтоимостьЧасаРаботы
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Сёсылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.СтоимостьЧасаРаботы;
	
КонецФункции

#Конецобласти








